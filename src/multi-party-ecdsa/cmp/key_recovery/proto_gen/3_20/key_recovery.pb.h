// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmp/key_recovery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cmp_2fkey_5frecovery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cmp_2fkey_5frecovery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "crypto-curve/proto_gen/curve_point.pb.switch.h"
#include "crypto-zkp/proto_gen/zkp.pb.switch.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cmp_2fkey_5frecovery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cmp_2fkey_5frecovery_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cmp_2fkey_5frecovery_2eproto;
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
namespace key_recovery {
class Round0BCMessage;
struct Round0BCMessageDefaultTypeInternal;
extern Round0BCMessageDefaultTypeInternal _Round0BCMessage_default_instance_;
class Round1BCMessage;
struct Round1BCMessageDefaultTypeInternal;
extern Round1BCMessageDefaultTypeInternal _Round1BCMessage_default_instance_;
class Round2BCMessage;
struct Round2BCMessageDefaultTypeInternal;
extern Round2BCMessageDefaultTypeInternal _Round2BCMessage_default_instance_;
}  // namespace key_recovery
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> ::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round0BCMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round0BCMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round1BCMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round1BCMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round2BCMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round2BCMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
namespace key_recovery {

// ===================================================================

class Round0BCMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0BCMessage) */ {
 public:
  inline Round0BCMessage() : Round0BCMessage(nullptr) {}
  ~Round0BCMessage() override;
  explicit PROTOBUF_CONSTEXPR Round0BCMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Round0BCMessage(const Round0BCMessage& from);
  Round0BCMessage(Round0BCMessage&& from) noexcept
    : Round0BCMessage() {
    *this = ::std::move(from);
  }

  inline Round0BCMessage& operator=(const Round0BCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round0BCMessage& operator=(Round0BCMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Round0BCMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Round0BCMessage* internal_default_instance() {
    return reinterpret_cast<const Round0BCMessage*>(
               &_Round0BCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Round0BCMessage& a, Round0BCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round0BCMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round0BCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Round0BCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Round0BCMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Round0BCMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Round0BCMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round0BCMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0BCMessage";
  }
  protected:
  explicit Round0BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVFieldNumber = 1,
  };
  // string V = 1;
  void clear_v();
  const std::string& v() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_v(ArgT0&& arg0, ArgT... args);
  std::string* mutable_v();
  PROTOBUF_NODISCARD std::string* release_v();
  void set_allocated_v(std::string* v);
  private:
  const std::string& _internal_v() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_v(const std::string& value);
  std::string* _internal_mutable_v();
  public:

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0BCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2fkey_5frecovery_2eproto;
};
// -------------------------------------------------------------------

class Round1BCMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage) */ {
 public:
  inline Round1BCMessage() : Round1BCMessage(nullptr) {}
  ~Round1BCMessage() override;
  explicit PROTOBUF_CONSTEXPR Round1BCMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Round1BCMessage(const Round1BCMessage& from);
  Round1BCMessage(Round1BCMessage&& from) noexcept
    : Round1BCMessage() {
    *this = ::std::move(from);
  }

  inline Round1BCMessage& operator=(const Round1BCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round1BCMessage& operator=(Round1BCMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Round1BCMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Round1BCMessage* internal_default_instance() {
    return reinterpret_cast<const Round1BCMessage*>(
               &_Round1BCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Round1BCMessage& a, Round1BCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round1BCMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round1BCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Round1BCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Round1BCMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Round1BCMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Round1BCMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round1BCMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage";
  }
  protected:
  explicit Round1BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIFieldNumber = 2,
    kJFieldNumber = 3,
    kKFieldNumber = 4,
    kXFieldNumber = 1,
    kAFieldNumber = 5,
    kBFieldNumber = 6,
    kRFieldNumber = 7,
    kTFieldNumber = 8,
    kPhiFieldNumber = 9,
  };
  // string i = 2;
  void clear_i();
  const std::string& i() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_i(ArgT0&& arg0, ArgT... args);
  std::string* mutable_i();
  PROTOBUF_NODISCARD std::string* release_i();
  void set_allocated_i(std::string* i);
  private:
  const std::string& _internal_i() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_i(const std::string& value);
  std::string* _internal_mutable_i();
  public:

  // string j = 3;
  void clear_j();
  const std::string& j() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_j(ArgT0&& arg0, ArgT... args);
  std::string* mutable_j();
  PROTOBUF_NODISCARD std::string* release_j();
  void set_allocated_j(std::string* j);
  private:
  const std::string& _internal_j() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_j(const std::string& value);
  std::string* _internal_mutable_j();
  public:

  // string k = 4;
  void clear_k();
  const std::string& k() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_k(ArgT0&& arg0, ArgT... args);
  std::string* mutable_k();
  PROTOBUF_NODISCARD std::string* release_k();
  void set_allocated_k(std::string* k);
  private:
  const std::string& _internal_k() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_k(const std::string& value);
  std::string* _internal_mutable_k();
  public:

  // .safeheron.proto.CurvePoint X = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  const ::safeheron::proto::CurvePoint& x() const;
  PROTOBUF_NODISCARD ::safeheron::proto::CurvePoint* release_x();
  ::safeheron::proto::CurvePoint* mutable_x();
  void set_allocated_x(::safeheron::proto::CurvePoint* x);
  private:
  const ::safeheron::proto::CurvePoint& _internal_x() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_x();
  public:
  void unsafe_arena_set_allocated_x(
      ::safeheron::proto::CurvePoint* x);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_x();

  // .safeheron.proto.CurvePoint A = 5;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  const ::safeheron::proto::CurvePoint& a() const;
  PROTOBUF_NODISCARD ::safeheron::proto::CurvePoint* release_a();
  ::safeheron::proto::CurvePoint* mutable_a();
  void set_allocated_a(::safeheron::proto::CurvePoint* a);
  private:
  const ::safeheron::proto::CurvePoint& _internal_a() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_a();
  public:
  void unsafe_arena_set_allocated_a(
      ::safeheron::proto::CurvePoint* a);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_a();

  // .safeheron.proto.CurvePoint B = 6;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const ::safeheron::proto::CurvePoint& b() const;
  PROTOBUF_NODISCARD ::safeheron::proto::CurvePoint* release_b();
  ::safeheron::proto::CurvePoint* mutable_b();
  void set_allocated_b(::safeheron::proto::CurvePoint* b);
  private:
  const ::safeheron::proto::CurvePoint& _internal_b() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_b();
  public:
  void unsafe_arena_set_allocated_b(
      ::safeheron::proto::CurvePoint* b);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_b();

  // .safeheron.proto.CurvePoint R = 7;
  bool has_r() const;
  private:
  bool _internal_has_r() const;
  public:
  void clear_r();
  const ::safeheron::proto::CurvePoint& r() const;
  PROTOBUF_NODISCARD ::safeheron::proto::CurvePoint* release_r();
  ::safeheron::proto::CurvePoint* mutable_r();
  void set_allocated_r(::safeheron::proto::CurvePoint* r);
  private:
  const ::safeheron::proto::CurvePoint& _internal_r() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_r();
  public:
  void unsafe_arena_set_allocated_r(
      ::safeheron::proto::CurvePoint* r);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_r();

  // .safeheron.proto.CurvePoint T = 8;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::safeheron::proto::CurvePoint& t() const;
  PROTOBUF_NODISCARD ::safeheron::proto::CurvePoint* release_t();
  ::safeheron::proto::CurvePoint* mutable_t();
  void set_allocated_t(::safeheron::proto::CurvePoint* t);
  private:
  const ::safeheron::proto::CurvePoint& _internal_t() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::safeheron::proto::CurvePoint* t);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_t();

  // .safeheron.proto.DLogProof_V2 phi = 9;
  bool has_phi() const;
  private:
  bool _internal_has_phi() const;
  public:
  void clear_phi();
  const ::safeheron::proto::DLogProof_V2& phi() const;
  PROTOBUF_NODISCARD ::safeheron::proto::DLogProof_V2* release_phi();
  ::safeheron::proto::DLogProof_V2* mutable_phi();
  void set_allocated_phi(::safeheron::proto::DLogProof_V2* phi);
  private:
  const ::safeheron::proto::DLogProof_V2& _internal_phi() const;
  ::safeheron::proto::DLogProof_V2* _internal_mutable_phi();
  public:
  void unsafe_arena_set_allocated_phi(
      ::safeheron::proto::DLogProof_V2* phi);
  ::safeheron::proto::DLogProof_V2* unsafe_arena_release_phi();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr j_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_;
  ::safeheron::proto::CurvePoint* x_;
  ::safeheron::proto::CurvePoint* a_;
  ::safeheron::proto::CurvePoint* b_;
  ::safeheron::proto::CurvePoint* r_;
  ::safeheron::proto::CurvePoint* t_;
  ::safeheron::proto::DLogProof_V2* phi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2fkey_5frecovery_2eproto;
};
// -------------------------------------------------------------------

class Round2BCMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2BCMessage) */ {
 public:
  inline Round2BCMessage() : Round2BCMessage(nullptr) {}
  ~Round2BCMessage() override;
  explicit PROTOBUF_CONSTEXPR Round2BCMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Round2BCMessage(const Round2BCMessage& from);
  Round2BCMessage(Round2BCMessage&& from) noexcept
    : Round2BCMessage() {
    *this = ::std::move(from);
  }

  inline Round2BCMessage& operator=(const Round2BCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round2BCMessage& operator=(Round2BCMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Round2BCMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Round2BCMessage* internal_default_instance() {
    return reinterpret_cast<const Round2BCMessage*>(
               &_Round2BCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Round2BCMessage& a, Round2BCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round2BCMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round2BCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Round2BCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Round2BCMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Round2BCMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Round2BCMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round2BCMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2BCMessage";
  }
  protected:
  explicit Round2BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPsiFieldNumber = 1,
    kSFieldNumber = 2,
  };
  // .safeheron.proto.DLogProof_V2 psi = 1;
  bool has_psi() const;
  private:
  bool _internal_has_psi() const;
  public:
  void clear_psi();
  const ::safeheron::proto::DLogProof_V2& psi() const;
  PROTOBUF_NODISCARD ::safeheron::proto::DLogProof_V2* release_psi();
  ::safeheron::proto::DLogProof_V2* mutable_psi();
  void set_allocated_psi(::safeheron::proto::DLogProof_V2* psi);
  private:
  const ::safeheron::proto::DLogProof_V2& _internal_psi() const;
  ::safeheron::proto::DLogProof_V2* _internal_mutable_psi();
  public:
  void unsafe_arena_set_allocated_psi(
      ::safeheron::proto::DLogProof_V2* psi);
  ::safeheron::proto::DLogProof_V2* unsafe_arena_release_psi();

  // .safeheron.proto.CurvePoint S = 2;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  const ::safeheron::proto::CurvePoint& s() const;
  PROTOBUF_NODISCARD ::safeheron::proto::CurvePoint* release_s();
  ::safeheron::proto::CurvePoint* mutable_s();
  void set_allocated_s(::safeheron::proto::CurvePoint* s);
  private:
  const ::safeheron::proto::CurvePoint& _internal_s() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_s();
  public:
  void unsafe_arena_set_allocated_s(
      ::safeheron::proto::CurvePoint* s);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_s();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2BCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::safeheron::proto::DLogProof_V2* psi_;
  ::safeheron::proto::CurvePoint* s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2fkey_5frecovery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Round0BCMessage

// string V = 1;
inline void Round0BCMessage::clear_v() {
  v_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::v() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0BCMessage.V)
  return _internal_v();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round0BCMessage::set_v(ArgT0&& arg0, ArgT... args) {
 
 v_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0BCMessage.V)
}
inline std::string* Round0BCMessage::mutable_v() {
  std::string* _s = _internal_mutable_v();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0BCMessage.V)
  return _s;
}
inline const std::string& Round0BCMessage::_internal_v() const {
  return v_.Get();
}
inline void Round0BCMessage::_internal_set_v(const std::string& value) {
  
  v_.Set(value, GetArenaForAllocation());
}
inline std::string* Round0BCMessage::_internal_mutable_v() {
  
  return v_.Mutable(GetArenaForAllocation());
}
inline std::string* Round0BCMessage::release_v() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0BCMessage.V)
  return v_.Release();
}
inline void Round0BCMessage::set_allocated_v(std::string* v) {
  if (v != nullptr) {
    
  } else {
    
  }
  v_.SetAllocated(v, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (v_.IsDefault()) {
    v_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0BCMessage.V)
}

// -------------------------------------------------------------------

// Round1BCMessage

// .safeheron.proto.CurvePoint X = 1;
inline bool Round1BCMessage::_internal_has_x() const {
  return this != internal_default_instance() && x_ != nullptr;
}
inline bool Round1BCMessage::has_x() const {
  return _internal_has_x();
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_x() const {
  const ::safeheron::proto::CurvePoint* p = x_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::x() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.X)
  return _internal_x();
}
inline void Round1BCMessage::unsafe_arena_set_allocated_x(
    ::safeheron::proto::CurvePoint* x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(x_);
  }
  x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.X)
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::release_x() {
  
  ::safeheron::proto::CurvePoint* temp = x_;
  x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::unsafe_arena_release_x() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.X)
  
  ::safeheron::proto::CurvePoint* temp = x_;
  x_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_mutable_x() {
  
  if (x_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArenaForAllocation());
    x_ = p;
  }
  return x_;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_x() {
  ::safeheron::proto::CurvePoint* _msg = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.X)
  return _msg;
}
inline void Round1BCMessage::set_allocated_x(::safeheron::proto::CurvePoint* x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(x_);
  }
  if (x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(x));
    if (message_arena != submessage_arena) {
      x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    
  } else {
    
  }
  x_ = x;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.X)
}

// string i = 2;
inline void Round1BCMessage::clear_i() {
  i_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::i() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.i)
  return _internal_i();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round1BCMessage::set_i(ArgT0&& arg0, ArgT... args) {
 
 i_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.i)
}
inline std::string* Round1BCMessage::mutable_i() {
  std::string* _s = _internal_mutable_i();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.i)
  return _s;
}
inline const std::string& Round1BCMessage::_internal_i() const {
  return i_.Get();
}
inline void Round1BCMessage::_internal_set_i(const std::string& value) {
  
  i_.Set(value, GetArenaForAllocation());
}
inline std::string* Round1BCMessage::_internal_mutable_i() {
  
  return i_.Mutable(GetArenaForAllocation());
}
inline std::string* Round1BCMessage::release_i() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.i)
  return i_.Release();
}
inline void Round1BCMessage::set_allocated_i(std::string* i) {
  if (i != nullptr) {
    
  } else {
    
  }
  i_.SetAllocated(i, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (i_.IsDefault()) {
    i_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.i)
}

// string j = 3;
inline void Round1BCMessage::clear_j() {
  j_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::j() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.j)
  return _internal_j();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round1BCMessage::set_j(ArgT0&& arg0, ArgT... args) {
 
 j_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.j)
}
inline std::string* Round1BCMessage::mutable_j() {
  std::string* _s = _internal_mutable_j();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.j)
  return _s;
}
inline const std::string& Round1BCMessage::_internal_j() const {
  return j_.Get();
}
inline void Round1BCMessage::_internal_set_j(const std::string& value) {
  
  j_.Set(value, GetArenaForAllocation());
}
inline std::string* Round1BCMessage::_internal_mutable_j() {
  
  return j_.Mutable(GetArenaForAllocation());
}
inline std::string* Round1BCMessage::release_j() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.j)
  return j_.Release();
}
inline void Round1BCMessage::set_allocated_j(std::string* j) {
  if (j != nullptr) {
    
  } else {
    
  }
  j_.SetAllocated(j, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (j_.IsDefault()) {
    j_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.j)
}

// string k = 4;
inline void Round1BCMessage::clear_k() {
  k_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::k() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.k)
  return _internal_k();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round1BCMessage::set_k(ArgT0&& arg0, ArgT... args) {
 
 k_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.k)
}
inline std::string* Round1BCMessage::mutable_k() {
  std::string* _s = _internal_mutable_k();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.k)
  return _s;
}
inline const std::string& Round1BCMessage::_internal_k() const {
  return k_.Get();
}
inline void Round1BCMessage::_internal_set_k(const std::string& value) {
  
  k_.Set(value, GetArenaForAllocation());
}
inline std::string* Round1BCMessage::_internal_mutable_k() {
  
  return k_.Mutable(GetArenaForAllocation());
}
inline std::string* Round1BCMessage::release_k() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.k)
  return k_.Release();
}
inline void Round1BCMessage::set_allocated_k(std::string* k) {
  if (k != nullptr) {
    
  } else {
    
  }
  k_.SetAllocated(k, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (k_.IsDefault()) {
    k_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.k)
}

// .safeheron.proto.CurvePoint A = 5;
inline bool Round1BCMessage::_internal_has_a() const {
  return this != internal_default_instance() && a_ != nullptr;
}
inline bool Round1BCMessage::has_a() const {
  return _internal_has_a();
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_a() const {
  const ::safeheron::proto::CurvePoint* p = a_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::a() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.A)
  return _internal_a();
}
inline void Round1BCMessage::unsafe_arena_set_allocated_a(
    ::safeheron::proto::CurvePoint* a) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_);
  }
  a_ = a;
  if (a) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.A)
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::release_a() {
  
  ::safeheron::proto::CurvePoint* temp = a_;
  a_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::unsafe_arena_release_a() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.A)
  
  ::safeheron::proto::CurvePoint* temp = a_;
  a_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_mutable_a() {
  
  if (a_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArenaForAllocation());
    a_ = p;
  }
  return a_;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_a() {
  ::safeheron::proto::CurvePoint* _msg = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.A)
  return _msg;
}
inline void Round1BCMessage::set_allocated_a(::safeheron::proto::CurvePoint* a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_);
  }
  if (a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a));
    if (message_arena != submessage_arena) {
      a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    
  } else {
    
  }
  a_ = a;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.A)
}

// .safeheron.proto.CurvePoint B = 6;
inline bool Round1BCMessage::_internal_has_b() const {
  return this != internal_default_instance() && b_ != nullptr;
}
inline bool Round1BCMessage::has_b() const {
  return _internal_has_b();
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_b() const {
  const ::safeheron::proto::CurvePoint* p = b_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::b() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.B)
  return _internal_b();
}
inline void Round1BCMessage::unsafe_arena_set_allocated_b(
    ::safeheron::proto::CurvePoint* b) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(b_);
  }
  b_ = b;
  if (b) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.B)
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::release_b() {
  
  ::safeheron::proto::CurvePoint* temp = b_;
  b_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::unsafe_arena_release_b() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.B)
  
  ::safeheron::proto::CurvePoint* temp = b_;
  b_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_mutable_b() {
  
  if (b_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArenaForAllocation());
    b_ = p;
  }
  return b_;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_b() {
  ::safeheron::proto::CurvePoint* _msg = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.B)
  return _msg;
}
inline void Round1BCMessage::set_allocated_b(::safeheron::proto::CurvePoint* b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(b_);
  }
  if (b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(b));
    if (message_arena != submessage_arena) {
      b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b, submessage_arena);
    }
    
  } else {
    
  }
  b_ = b;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.B)
}

// .safeheron.proto.CurvePoint R = 7;
inline bool Round1BCMessage::_internal_has_r() const {
  return this != internal_default_instance() && r_ != nullptr;
}
inline bool Round1BCMessage::has_r() const {
  return _internal_has_r();
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_r() const {
  const ::safeheron::proto::CurvePoint* p = r_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::r() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.R)
  return _internal_r();
}
inline void Round1BCMessage::unsafe_arena_set_allocated_r(
    ::safeheron::proto::CurvePoint* r) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(r_);
  }
  r_ = r;
  if (r) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.R)
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::release_r() {
  
  ::safeheron::proto::CurvePoint* temp = r_;
  r_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::unsafe_arena_release_r() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.R)
  
  ::safeheron::proto::CurvePoint* temp = r_;
  r_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_mutable_r() {
  
  if (r_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArenaForAllocation());
    r_ = p;
  }
  return r_;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_r() {
  ::safeheron::proto::CurvePoint* _msg = _internal_mutable_r();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.R)
  return _msg;
}
inline void Round1BCMessage::set_allocated_r(::safeheron::proto::CurvePoint* r) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(r_);
  }
  if (r) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(r));
    if (message_arena != submessage_arena) {
      r = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, r, submessage_arena);
    }
    
  } else {
    
  }
  r_ = r;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.R)
}

// .safeheron.proto.CurvePoint T = 8;
inline bool Round1BCMessage::_internal_has_t() const {
  return this != internal_default_instance() && t_ != nullptr;
}
inline bool Round1BCMessage::has_t() const {
  return _internal_has_t();
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_t() const {
  const ::safeheron::proto::CurvePoint* p = t_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::t() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.T)
  return _internal_t();
}
inline void Round1BCMessage::unsafe_arena_set_allocated_t(
    ::safeheron::proto::CurvePoint* t) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_);
  }
  t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.T)
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::release_t() {
  
  ::safeheron::proto::CurvePoint* temp = t_;
  t_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.T)
  
  ::safeheron::proto::CurvePoint* temp = t_;
  t_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_mutable_t() {
  
  if (t_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArenaForAllocation());
    t_ = p;
  }
  return t_;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_t() {
  ::safeheron::proto::CurvePoint* _msg = _internal_mutable_t();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.T)
  return _msg;
}
inline void Round1BCMessage::set_allocated_t(::safeheron::proto::CurvePoint* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_);
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t));
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.T)
}

// .safeheron.proto.DLogProof_V2 phi = 9;
inline bool Round1BCMessage::_internal_has_phi() const {
  return this != internal_default_instance() && phi_ != nullptr;
}
inline bool Round1BCMessage::has_phi() const {
  return _internal_has_phi();
}
inline const ::safeheron::proto::DLogProof_V2& Round1BCMessage::_internal_phi() const {
  const ::safeheron::proto::DLogProof_V2* p = phi_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::DLogProof_V2&>(
      ::safeheron::proto::_DLogProof_V2_default_instance_);
}
inline const ::safeheron::proto::DLogProof_V2& Round1BCMessage::phi() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.phi)
  return _internal_phi();
}
inline void Round1BCMessage::unsafe_arena_set_allocated_phi(
    ::safeheron::proto::DLogProof_V2* phi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phi_);
  }
  phi_ = phi;
  if (phi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.phi)
}
inline ::safeheron::proto::DLogProof_V2* Round1BCMessage::release_phi() {
  
  ::safeheron::proto::DLogProof_V2* temp = phi_;
  phi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::DLogProof_V2* Round1BCMessage::unsafe_arena_release_phi() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.phi)
  
  ::safeheron::proto::DLogProof_V2* temp = phi_;
  phi_ = nullptr;
  return temp;
}
inline ::safeheron::proto::DLogProof_V2* Round1BCMessage::_internal_mutable_phi() {
  
  if (phi_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::DLogProof_V2>(GetArenaForAllocation());
    phi_ = p;
  }
  return phi_;
}
inline ::safeheron::proto::DLogProof_V2* Round1BCMessage::mutable_phi() {
  ::safeheron::proto::DLogProof_V2* _msg = _internal_mutable_phi();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.phi)
  return _msg;
}
inline void Round1BCMessage::set_allocated_phi(::safeheron::proto::DLogProof_V2* phi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(phi_);
  }
  if (phi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phi));
    if (message_arena != submessage_arena) {
      phi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phi, submessage_arena);
    }
    
  } else {
    
  }
  phi_ = phi;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1BCMessage.phi)
}

// -------------------------------------------------------------------

// Round2BCMessage

// .safeheron.proto.DLogProof_V2 psi = 1;
inline bool Round2BCMessage::_internal_has_psi() const {
  return this != internal_default_instance() && psi_ != nullptr;
}
inline bool Round2BCMessage::has_psi() const {
  return _internal_has_psi();
}
inline const ::safeheron::proto::DLogProof_V2& Round2BCMessage::_internal_psi() const {
  const ::safeheron::proto::DLogProof_V2* p = psi_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::DLogProof_V2&>(
      ::safeheron::proto::_DLogProof_V2_default_instance_);
}
inline const ::safeheron::proto::DLogProof_V2& Round2BCMessage::psi() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2BCMessage.psi)
  return _internal_psi();
}
inline void Round2BCMessage::unsafe_arena_set_allocated_psi(
    ::safeheron::proto::DLogProof_V2* psi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_);
  }
  psi_ = psi;
  if (psi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2BCMessage.psi)
}
inline ::safeheron::proto::DLogProof_V2* Round2BCMessage::release_psi() {
  
  ::safeheron::proto::DLogProof_V2* temp = psi_;
  psi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::DLogProof_V2* Round2BCMessage::unsafe_arena_release_psi() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2BCMessage.psi)
  
  ::safeheron::proto::DLogProof_V2* temp = psi_;
  psi_ = nullptr;
  return temp;
}
inline ::safeheron::proto::DLogProof_V2* Round2BCMessage::_internal_mutable_psi() {
  
  if (psi_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::DLogProof_V2>(GetArenaForAllocation());
    psi_ = p;
  }
  return psi_;
}
inline ::safeheron::proto::DLogProof_V2* Round2BCMessage::mutable_psi() {
  ::safeheron::proto::DLogProof_V2* _msg = _internal_mutable_psi();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2BCMessage.psi)
  return _msg;
}
inline void Round2BCMessage::set_allocated_psi(::safeheron::proto::DLogProof_V2* psi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_);
  }
  if (psi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi));
    if (message_arena != submessage_arena) {
      psi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psi, submessage_arena);
    }
    
  } else {
    
  }
  psi_ = psi;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2BCMessage.psi)
}

// .safeheron.proto.CurvePoint S = 2;
inline bool Round2BCMessage::_internal_has_s() const {
  return this != internal_default_instance() && s_ != nullptr;
}
inline bool Round2BCMessage::has_s() const {
  return _internal_has_s();
}
inline const ::safeheron::proto::CurvePoint& Round2BCMessage::_internal_s() const {
  const ::safeheron::proto::CurvePoint* p = s_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Round2BCMessage::s() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2BCMessage.S)
  return _internal_s();
}
inline void Round2BCMessage::unsafe_arena_set_allocated_s(
    ::safeheron::proto::CurvePoint* s) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(s_);
  }
  s_ = s;
  if (s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2BCMessage.S)
}
inline ::safeheron::proto::CurvePoint* Round2BCMessage::release_s() {
  
  ::safeheron::proto::CurvePoint* temp = s_;
  s_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round2BCMessage::unsafe_arena_release_s() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2BCMessage.S)
  
  ::safeheron::proto::CurvePoint* temp = s_;
  s_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round2BCMessage::_internal_mutable_s() {
  
  if (s_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArenaForAllocation());
    s_ = p;
  }
  return s_;
}
inline ::safeheron::proto::CurvePoint* Round2BCMessage::mutable_s() {
  ::safeheron::proto::CurvePoint* _msg = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2BCMessage.S)
  return _msg;
}
inline void Round2BCMessage::set_allocated_s(::safeheron::proto::CurvePoint* s) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(s_);
  }
  if (s) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(s));
    if (message_arena != submessage_arena) {
      s = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s, submessage_arena);
    }
    
  } else {
    
  }
  s_ = s;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2BCMessage.S)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace key_recovery
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cmp_2fkey_5frecovery_2eproto
